{"version":3,"sources":["HomeExercises/Exercise5-TicTacToe/SquareComp.js","HomeExercises/Exercise5-TicTacToe/RowComp.js","HomeExercises/Exercise5-TicTacToe/BoardComp.js","HomeExercises/Exercise5-TicTacToe/GameMainComp.js","MainSwitcher.js","App.js","serviceWorker.js","index.js"],"names":["SquareComp","props","state","value","cardStyle","styleClass","this","isWinningSquare","className","onClick","Component","RowComp","renderSquare","i","winningSquares","includes","key","squares","renderColumnsPerRow","items","columnNum","length","boardSize","push","BoardComp","handleClick","slice","calculateWinner","xIsNext","setState","isGameOver","index","size","parseInt","winningOptions","a","b","c","player","line","winningOptions2","d","console","log","handleSizeChange","event","newSizeValue","target","title","Math","pow","Array","fill","getStatus","status","winner","renderRow","x","renderBoard","obj","rowIndex","statusObj","Dropdown","Toggle","variant","id","Menu","Item","as","active","GameMainComp","handleRestart","window","location","reload","Button","MainSwitcher","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f5099776.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass SquareComp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: null, cardStyle: \"square\" };\r\n  }\r\n\r\n  render() {\r\n    let styleClass;\r\n    if (this.props.value === \"X\") {\r\n      styleClass = \"square-red\";\r\n    } else if (this.props.value === \"O\") {\r\n      styleClass = \"square-blue\";\r\n    } else {\r\n      styleClass = this.state.cardStyle;\r\n    }\r\n    if (this.props.isWinningSquare) {\r\n      styleClass = \"square-winner\";\r\n    }\r\n\r\n    return (\r\n      <button className={styleClass} onClick={() => this.props.onClick()}>\r\n        {this.props.value}\r\n      </button>\r\n    );\r\n  }\r\n}\r\nexport default SquareComp;\r\n","import React, { Component } from \"react\";\r\nimport SquareComp from \"./SquareComp\";\r\n\r\nclass RowComp extends Component {\r\n  renderSquare = (i) => {\r\n    let winArr = this.props.winningSquares;\r\n    let isWinningSquare = winArr.winningSquares.includes(i);\r\n    return (\r\n      <SquareComp\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        isWinningSquare={isWinningSquare}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  };\r\n\r\n  renderColumnsPerRow = (i) => {\r\n    const items = [];\r\n    for (\r\n      let columnNum = 0;\r\n      columnNum < this.props.squares.length / this.props.boardSize;\r\n      columnNum++\r\n    ) {\r\n      items.push(this.renderSquare(i + columnNum));\r\n    }\r\n    return items;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"board-row\">\r\n        {this.renderColumnsPerRow(this.props.value)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default RowComp;\r\n","import React, { Component } from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport RowComp from \"./RowComp\";\r\n\r\nclass BoardComp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      boardSize: 3,\r\n      squares: Array(9).fill(null),\r\n      xIsNext: true,\r\n    };\r\n  }\r\n\r\n  handleClick = (i) => {\r\n    const squares = this.state.squares.slice();\r\n    if (this.calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({ squares: squares, xIsNext: !this.state.xIsNext });\r\n  };\r\n\r\n  isGameOver = () => {\r\n    const squares = this.state.squares;\r\n    for (let index = 0; index < squares.length; index++) {\r\n      const element = squares[index];\r\n      if (element === null) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  calculateWinner = (squares) => {\r\n    let size = this.state.boardSize;\r\n    switch (parseInt(size)) {\r\n      case 3:\r\n        let winningOptions = [\r\n          [0, 1, 2],\r\n          [3, 4, 5],\r\n          [6, 7, 8],\r\n          [0, 3, 6],\r\n          [1, 4, 7],\r\n          [2, 5, 8],\r\n          [0, 4, 8],\r\n          [2, 4, 6],\r\n        ];\r\n        for (let i = 0; i < winningOptions.length; i++) {\r\n          let [a, b, c] = winningOptions[i];\r\n          if (\r\n            squares[a] &&\r\n            squares[a] === squares[b] &&\r\n            squares[a] === squares[c]\r\n          ) {\r\n            return { player: squares[a], line: [a, b, c] };\r\n          }\r\n        }\r\n        return null;\r\n      case 4:\r\n        let winningOptions2 = [\r\n          [0, 1, 2, 3],\r\n          [4, 5, 6, 7],\r\n          [8, 9, 10, 11],\r\n          [12, 13, 14, 15],\r\n          [0, 4, 8, 12],\r\n          [1, 5, 9, 13],\r\n          [2, 6, 10, 14],\r\n          [3, 7, 11, 15],\r\n          [0, 5, 10, 15],\r\n          [3, 6, 9, 12],\r\n        ];\r\n        for (let i = 0; i < winningOptions2.length; i++) {\r\n          let [a, b, c, d] = winningOptions2[i];\r\n          if (\r\n            squares[a] &&\r\n            squares[a] === squares[b] &&\r\n            squares[a] === squares[c] &&\r\n            squares[a] === squares[d]\r\n          ) {\r\n            return { player: squares[a], line: [a, b, c, d] };\r\n          }\r\n        }\r\n        return null;\r\n      default:\r\n        console.log(\"Something is wrong!!!\");\r\n        return null;\r\n    }\r\n  };\r\n\r\n  handleSizeChange = (event) => {\r\n    let newSizeValue = event.target.title;\r\n    let size = Math.pow(newSizeValue, 2);\r\n    this.setState({\r\n      boardSize: newSizeValue,\r\n      squares: Array(size).fill(null),\r\n      xIsNext: true,\r\n    });\r\n  };\r\n\r\n  getStatus = () => {\r\n    const winner = this.calculateWinner(this.state.squares);\r\n    let status;\r\n    let winningSquares = [];\r\n    if (winner != null) {\r\n      status = \"Winner: \" + winner.player;\r\n      winningSquares = winner.line;\r\n    } else if (this.isGameOver()) {\r\n      status = \"Outcome is tie!\";\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n    return { status: status, winningSquares: winningSquares };\r\n  };\r\n\r\n  renderRow = (i, winningSquares) => {\r\n    return (\r\n      <RowComp\r\n        key={i}\r\n        value={i}\r\n        squares={this.state.squares}\r\n        boardSize={this.state.boardSize}\r\n        winningSquares={winningSquares}\r\n        onClick={(x) => this.handleClick(x)}\r\n      />\r\n    );\r\n  };\r\n\r\n  renderBoard = (obj) => {\r\n    const items = [];\r\n    for (\r\n      let rowIndex = 0;\r\n      rowIndex < this.state.squares.length;\r\n      rowIndex += this.state.squares.length / this.state.boardSize\r\n    ) {\r\n      items.push(this.renderRow(rowIndex, obj));\r\n    }\r\n    return items;\r\n  };\r\n\r\n  render() {\r\n    let statusObj = this.getStatus();\r\n    let status = statusObj.status;\r\n    let winningSquares = statusObj.winningSquares;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">{this.renderBoard({ winningSquares })}</div>\r\n        <div className=\"status\">{status}</div>\r\n\r\n        <Dropdown>\r\n          <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n            Board Size\r\n          </Dropdown.Toggle>\r\n          <Dropdown.Menu>\r\n            <Dropdown.Item\r\n              as=\"button\"\r\n              title=\"3\"\r\n              active={true}\r\n              onClick={this.handleSizeChange}\r\n            >\r\n              3\r\n            </Dropdown.Item>\r\n            <Dropdown.Item\r\n              as=\"button\"\r\n              title=\"4\"\r\n              onClick={this.handleSizeChange}\r\n            >\r\n              4\r\n            </Dropdown.Item>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default BoardComp;\r\n","import React, { Component } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./main.css\";\r\nimport BoardComp from \"./BoardComp\";\r\n\r\nclass GameMainComp extends Component {\r\n  handleRestart = () => {\r\n    window.location.reload(false);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"section\">\r\n        <div className=\"container\">\r\n          <BoardComp />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>\r\n            <Button\r\n              className=\"button\"\r\n              variant=\"primary\"\r\n              onClick={this.handleRestart}\r\n            >\r\n              Restart Game\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default GameMainComp;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport GameMainComp from \"./HomeExercises/Exercise5-TicTacToe/GameMainComp\";\n\nconst MainSwitcher = () => {\n  return (\n    <div>\n      <GameMainComp />\n    </div>\n  );\n};\n\nexport default MainSwitcher;\n","import React from \"react\";\nimport \"./App.css\";\nimport MainSwitcher from \"./MainSwitcher\";\n\nconst App = () => {\n  return (\n    <div>\n      <header>\n        <div>\n          <h3>How About a Little Game of Tic Tac Toe?</h3>\n        </div>\n      </header>\n      <MainSwitcher />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    \n      <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}